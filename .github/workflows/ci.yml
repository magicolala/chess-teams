name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  statuses: write
  checks: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.1', '8.2', '8.3']
    env:
      APP_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/chess_teams_test?serverVersion=16&charset=utf8
      REDIS_URL: redis://127.0.0.1:6379/1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chess_teams_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: ctype, iconv, json, pdo, pdo_pgsql, tokenizer, redis
        coverage: xdebug
        tools: composer:v2

    - name: 🔄 Sync composer.lock (metadata-only)
      run: composer update --lock --no-scripts

    - name: 📋 Validate composer.json
      run: composer validate --strict

    - name: 📦 Install PHP dependencies (cached)
      uses: ramsey/composer-install@v3
      with:
        composer-options: --prefer-dist --no-progress --optimize-autoloader

    - name: 🔧 Show environment
      run: |
        php -v
        composer --version
        echo "APP_ENV=$APP_ENV"
        echo "DATABASE_URL=$DATABASE_URL"
        echo "REDIS_URL=$REDIS_URL"

    - name: 🐘 PHP modules (PDO/pgsql)
      run: |
        php -m | grep -i -E 'pdo|pgsql' || true
        php -r "echo 'pdo_pgsql? ', extension_loaded('pdo_pgsql') ? 'yes' : 'no', PHP_EOL;"

    - name: 🧭 Debug Doctrine config (test)
      run: |
        php bin/console about --env=test || true
        php bin/console debug:config doctrine --env=test || true

    - name: 🛠️ Install Postgres client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: 🧪 Ensure test env variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/chess_teams_test?serverVersion=16&charset=utf8" > .env.test.local
        echo "REDIS_URL=redis://127.0.0.1:6379/1" >> .env.test.local
        php bin/console cache:clear --env=test || true

    - name: 🗄️ Setup database (psql)
      env:
        PGPASSWORD: postgres
      run: |
        # Create test database if it does not exist using psql directly
        psql -h 127.0.0.1 -U postgres -p 5432 -tc "SELECT 1 FROM pg_database WHERE datname = 'chess_teams_test'" | grep -q 1 || \
          psql -h 127.0.0.1 -U postgres -p 5432 -c "CREATE DATABASE chess_teams_test;"
        # Run migrations via Symfony
        DATABASE_URL="postgresql://postgres:postgres@127.0.0.1:5432/chess_teams_test?serverVersion=16&charset=utf8" php bin/console doctrine:migrations:migrate --no-interaction --env=test

    - name: 🧪 Run unit tests
      run: |
        DATABASE_URL="postgresql://postgres:postgres@127.0.0.1:5432/chess_teams_test?serverVersion=16&charset=utf8" ./vendor/bin/phpunit --testsuite=unit --coverage-clover=coverage.xml

    - name: 🔗 Run functional tests
      run: |
        DATABASE_URL="postgresql://postgres:postgres@127.0.0.1:5432/chess_teams_test?serverVersion=16&charset=utf8" ./vendor/bin/phpunit --testsuite=functional

    - name: 📊 Upload coverage to Codecov
      if: ${{ env.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ env.CODECOV_TOKEN }}

  code-quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: ctype, iconv, json
        tools: composer:v2

    - name: 📦 Install dependencies (cached)
      uses: ramsey/composer-install@v3
      with:
        composer-options: --prefer-dist --no-progress

    - name: 🎨 Check code style
      run: composer cs:check

    - name: 🔍 Run PHPStan
      run: |
        if [ -f phpstan.neon ]; then
          ./vendor/bin/phpstan analyze
        else
          echo "PHPStan not configured, skipping..."
        fi

  assets:
    name: 🎨 Assets & Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2

    - name: 📦 Install PHP dependencies (cached)
      uses: ramsey/composer-install@v3
      with:
        composer-options: --prefer-dist --no-progress

    - name: 🎨 Compile assets
      env:
        APP_ENV: prod
      run: php bin/console asset-map:compile --env=prod

    - name: ✅ Verify asset compilation
      run: |
        if [ ! -f public/assets/manifest.json ]; then
          echo "❌ Asset compilation failed - manifest.json not found"
          exit 1
        fi
        echo "✅ Assets compiled successfully"

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2

    - name: 📦 Install dependencies (cached)
      uses: ramsey/composer-install@v3
      with:
        composer-options: --prefer-dist --no-progress

    - name: 🔐 Harden env file permissions
      run: |
        # Durcir les permissions des fichiers .env* sous notre contrôle (hors vendor/.git/node_modules)
        umask 027
        find . \
          -path './vendor/*' -prune -o \
          -path './.git/*' -prune -o \
          -path './node_modules/*' -prune -o \
          -type f \( -name '.env*' -o -name '*.env*' \) \
          -exec chmod go-r {} +

    - name: 🔐 Ensure Composer uses HTTPS
      run: |
        composer config -g secure-http true
        composer config -g repos.packagist composer https://repo.packagist.org

    - name: 🛡️ Security audit
      run: |
        # Composer audit pour les vulnérabilités connues
        composer audit
        
        # Vérifier les permissions des fichiers sensibles (exclure vendor/.git/node_modules)
        if find . \
          -path './vendor/*' -prune -o \
          -path './.git/*' -prune -o \
          -path './node_modules/*' -prune -o \
          -type f \( -name '.env*' -o -name '*.env*' \) -perm /o+r -print -quit | grep -q .; then
          echo "❌ Environment files are world-readable"
          exit 1
        else
          echo "✅ Environment files permissions OK"
        fi

  deployment:
    name: 🚀 Deployment
    runs-on: ubuntu-latest
    needs: [tests, code-quality, assets, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2

    - name: 📦 Install production dependencies (cached)
      uses: ramsey/composer-install@v3
      with:
        composer-options: --no-dev --optimize-autoloader --prefer-dist --no-progress

    - name: 🎨 Compile production assets
      run: php bin/console asset-map:compile --env=prod

    - name: 📋 Create deployment artifact
      run: |
        tar -czf chess-teams-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='var/cache' \
          --exclude='var/log' \
          .

    - name: 📤 Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: chess-teams-${{ github.sha }}
        path: chess-teams-${{ github.sha }}.tar.gz
        retention-days: 30

    # Exemple de déploiement (à adapter selon votre infrastructure)
    # - name: 🚀 Deploy to production
    #   run: |
    #     # Vos commandes de déploiement ici
    #     echo "Deploying to production..."

  notification:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [tests, code-quality, assets, security]
    if: always()

    steps:
    - name: 📢 Notify Discord
      if: failure()
      run: |
        # Envoyer une notification Discord en cas d'échec
        echo "Build failed - would send Discord notification"
        
    - name: 📧 Notify Email
      if: failure() && github.ref == 'refs/heads/main'
      run: |
        # Envoyer email en cas d'échec sur main
        echo "Critical build failure on main - would send email"

  tests-full-docker:
    name: 🐳 Tests (Full Docker)
    runs-on: ubuntu-latest
    # Peut être exécuté en parallèle des autres jobs, n'est pas requis par le déploiement par défaut
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Show Docker versions
        run: |
          docker --version
          docker compose version

      - name: 🧱 Build PHP container (compose override)
        run: |
          docker compose -f compose.yaml -f compose.override.yaml build php

      - name: 🗄️ Start database service
        run: |
          docker compose -f compose.yaml -f compose.override.yaml up -d database

      - name: ⏱️ Wait for Postgres to be healthy
        run: |
          echo "Waiting for Postgres to be ready..."
          i=0
          until [ "$i" -ge 30 ]; do
            if docker compose -f compose.yaml -f compose.override.yaml exec -T database pg_isready -U app -h 127.0.0.1 -p 5432; then
              echo "Postgres is ready"; break;
            fi
            i=$((i+1)); echo "Postgres not ready yet, retry $i/30"; sleep 2;
          done

      - name: 📦 Install PHP dependencies
        run: >
          docker compose -f compose.yaml -f compose.override.yaml run --rm --entrypoint sh
          -e APP_ENV=test
          -e DATABASE_URL=postgresql://app:!ChangeMe!@database:5432/chess_teams_test?serverVersion=16&charset=utf8
          php -lc "composer install --prefer-dist --no-progress --optimize-autoloader"

      - name: 🗃️ Setup test database (migrate)
        run: |
          # Create database directly on the Postgres service
          docker compose -f compose.yaml -f compose.override.yaml exec -T -e PGPASSWORD='!ChangeMe!' database \
            psql -U app -h 127.0.0.1 -p 5432 -tc "SELECT 1 FROM pg_database WHERE datname = 'chess_teams_test'" | grep -q 1 || \
          docker compose -f compose.yaml -f compose.override.yaml exec -T -e PGPASSWORD='!ChangeMe!' database \
            psql -U app -h 127.0.0.1 -p 5432 -c "CREATE DATABASE chess_teams_test;"
          # Run migrations in php container
          docker compose -f compose.yaml -f compose.override.yaml run --rm --entrypoint sh \
            -e APP_ENV=test \
            -e DATABASE_URL=postgresql://app:!ChangeMe!@database:5432/chess_teams_test?serverVersion=16&charset=utf8 \
            php -lc "php bin/console doctrine:migrations:migrate -n --env=test"

      - name: 🧪 Run tests inside container
        run: >
          docker compose -f compose.yaml -f compose.override.yaml run --rm --entrypoint sh
          -e APP_ENV=test
          -e XDEBUG_MODE=coverage
          -e DATABASE_URL=postgresql://app:!ChangeMe!@database:5432/chess_teams_test?serverVersion=16&charset=utf8
          php -lc "./vendor/bin/phpunit --testsuite=unit,functional --coverage-clover=coverage.xml"

      - name: 📤 Upload coverage artifact (Full Docker)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-full-docker-${{ github.sha }}
          path: coverage.xml

      - name: 🧹 Teardown
        if: always()
        run: |
          docker compose -f compose.yaml -f compose.override.yaml down -v || true
